name: Build & Deploy
 
on:
  push:
    branches:
      - main
 
env:
  CI: false

jobs:
  build: 
    name: Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo 
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 16

      - name: Install dependencies
        run: npm install

      - name: Run Jest tests
        run: npm test

      - name: Cypress run
        uses: cypress-io/github-action@v6
        
      - name: Build project
        run: npm run build
        env:
          VITE_API_ENDPOINT: ${{ secrets.VITE_API_ENDPOINT }}
          slack-webhook:  ${{ secrets.SLACK_URI }}

      - name: Upload production-ready build files
        uses: actions/upload-artifact@v2
        with:
          name: production-files
          path: ./dist

      - name: Install Docker
        run: |
          curl -fsSL https://get.docker.com -o get-docker.sh  # Download Docker installation script
          sh get-docker.sh  # Run Docker installation script

      # Step 4: Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          npm install  

      # Step 5: Install backend dependencies
      - name: Install backend dependencies
        run: |
          cd backend 
          npm install  

      # Step 6: Build Docker image for the frontend
      - name: Build frontend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/sportgitf-frontend:latest -f Dockerfile .  

      # Step 7: Build Docker image for the backend
      - name: Build backend Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/sportgitf-backend:latest -f backend/Dockerfile .  

      # Step 8: Authenticate with Docker Hub
      - name: Docker login
        uses: docker/login-action@v2  # Use the docker/login-action to authenticate with Docker Hub
        with:
          username: ${{ secrets.DOCKER_USERNAME }}  # Use Docker username from secrets
          password: ${{ secrets.DOCKER_PASSWORD }}  # Use Docker password from secrets

      # Step 9: Push frontend Docker image to Docker Hub
      - name: Push frontend Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/sportgitf-frontend:latest  

      # Step 10: Push backend Docker image to Docker Hub
      - name: Push backend Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/sportgitf-backend:latest  

          
      - name: Slack Notification during build phase
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: general
          SLACK_MESSAGE: "Job status: ${{ job.status }}" # or a specific color like 'good' or '#ff00ff
          SLACK_TITLE: hey Arunava, sorry to let you know you broke the build
          SLACK_USERNAME: arunav pari
          SLACK_WEBHOOK: ${{ secrets.SLACK_URI }} 
      
        if: failure()

      - name: Slack Notification during build phase for success
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: general
          SLACK_MESSAGE: "Job status: ${{ job.status }}" # or a specific color like 'good' or '#ff00ff
          SLACK_TITLE: you have successfully build ..
          SLACK_USERNAME: arunav pari
          SLACK_WEBHOOK: ${{ secrets.SLACK_URI }} 
      
        if: success()  
      

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: production-files
          path: ./dist

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.TOKEN }}
          publish_dir: ./dist
          publish_branch: gh-pages # Specify the branch where GitHub Pages is hosted
          force_orphan: true       # Force to initialize the branch as an orphan
          cname: example.com       # Optional: Add a custom domain if needed
          
  
      - name: Slack Notification during deploy phase
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_CHANNEL: general
          SLACK_MESSAGE: "Job status: ${{ job.status }}" # or a specific color like 'good' or '#ff00ff
          SLACK_TITLE: hey Arunava, sorry to let you know you broke the deploy
          SLACK_USERNAME: arunav pari
          SLACK_WEBHOOK: ${{ secrets.SLACK_URI }} 
      
        if: failure()


      
